Code :

#include <stdio.h>
#include <stdlib.h>

struct process {
    int pid;
    int arrival_time;
    int burst_time;
    int remaining_time;
    int completion_time;
    int turnaround_time;
    int waiting_time;
    int priority;
};

int main() {
    int num_processes, i, j, time = 0, completed = 0, highest_priority_index;
    float avg_turnaround_time = 0, avg_waiting_time = 0;
    printf("Enter the number of processes: ");
    scanf("%d", &num_processes);
    struct process p[num_processes], temp;
    for (i=0; i<num_processes; i++) {
        printf("Enter arrival time, burst time, and priority for process %d: ", i+1);
        scanf("%d %d %d", &p[i].arrival_time, &p[i].burst_time, &p[i].priority);
        p[i].pid = i+1;
        p[i].remaining_time = p[i].burst_time;
    }
    while (completed != num_processes) {
        highest_priority_index = -1;
        for (i=0; i<num_processes; i++) {
            if (p[i].remaining_time > 0 && p[i].arrival_time <= time) {
                if (highest_priority_index == -1 || p[i].priority < p[highest_priority_index].priority) {
                    highest_priority_index = i;
                }
            }
        }
        if (highest_priority_index != -1) {
            p[highest_priority_index].remaining_time--;
            time++;
            if (p[highest_priority_index].remaining_time == 0) {
                completed++;
                p[highest_priority_index].completion_time = time;
                p[highest_priority_index].turnaround_time = p[highest_priority_index].completion_time - p[highest_priority_index].arrival_time;
                p[highest_priority_index].waiting_time = p[highest_priority_index].turnaround_time - p[highest_priority_index].burst_time;
            }
        }
        else {
            time++;
        }
    }
    for (i=0; i<num_processes-1; i++) {
        for (j=i+1; j<num_processes; j++) {
            if (p[j].arrival_time < p[i].arrival_time) {
                temp = p[i];
                p[i] = p[j];
                p[j] = temp;
            }
        }
    }
    printf("ID\tBT\tAT\tCT\tTAT\tWT\n");
    for (i=0; i<num_processes; i++) {
        printf("%d\t%d\t%d\t%d\t%d\t%d\n", p[i].pid, p[i].burst_time, p[i].arrival_time, p[i].completion_time, p[i].turnaround_time, p[i].waiting_time);
        avg_turnaround_time += p[i].turnaround_time;
        avg_waiting_time += p[i].waiting_time;
    }
    printf("Average turnaround time: %.2f\n", avg_turnaround_time/num_processes);
    printf("Average waiting time: %.2f\n", avg_waiting_time/num_processes);
    return 0;
}


Algo :

Read the number of processes and their arrival time, burst time, and priority.
While there are still processes to be executed:
Find the process with the highest priority that has arrived and has remaining burst time.
If such a process exists, execute it for one unit of time.
If the process completes its burst time, mark it as completed and calculate its completion time, turnaround time, and waiting time.
If no such process exists, increment the time counter.
Sort the processes based on their arrival time.
Calculate and print the turnaround time and waiting time for each process.
Calculate and print the average turnaround time and average waiting time.