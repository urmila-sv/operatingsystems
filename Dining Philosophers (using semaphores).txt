 Dining Philosophers Probelm

 CODE:-
#include<stdio.h>
#include<stdlib.h>
#include<pthread.h>
#include<semaphore.h>
#include<unistd.h>
sem_t room;
sem_t chopstick[5];
void * philosopher(void *);
void eat(int);
int main()
{
 int i,a[5];
 pthread_t tid[5];
 sem_init(&room,0,4);
 for(i=0;i<5;i++)
 sem_init(&chopstick[i],0,1);
 for(i=0;i<5;i++){
 a[i]=i;
 pthread_create(&tid[i],NULL,philosopher,(void *)&a[i]);
 }
 for(i=0;i<5;i++)
 pthread_join(tid[i],NULL);
}
void * philosopher(void * num)
{
 int phil=*(int *)num;
 sem_wait(&room);
 printf("\nPhilosopher %d has entered room",phil);
 sem_wait(&chopstick[phil]);
 sem_wait(&chopstick[(phil+1)%5]);
 eat(phil);
 sleep(2);
 printf("\nPhilosopher %d has finished eating",phil);
 sem_post(&chopstick[(phil+1)%5]);
 sem_post(&chopstick[phil]);
 sem_post(&room);
}
void eat(int phil)
{
 printf("\nPhilosopher %d is eating",phil);
}


Algo :

Include the necessary header files stdio.h, stdlib.h, pthread.h, and semaphore.h.
Declare global variables room and chopstick.
Define a function philosopher() to run the philosopher thread.
Define a function eat() to simulate a philosopher eating.
Define the main function.
Initialize the semaphores room and chopstick.
Create philosopher threads using the pthread_create() function.
Wait for all philosopher threads to finish using the pthread_join() function.
Destroy the semaphores using the sem_destroy() function.
Exit the program with a return value of 0.

In summary, this program implements a solution to the dining philosophers problem using threads and semaphores. The algorithm uses a semaphore room to limit the number of philosophers at the table, and an array of semaphores chopstick to represent the chopsticks. Each philosopher runs in their own thread, which are created using the pthread_create() function, and they communicate with each other by acquiring and releasing chopsticks as they alternate between thinking and eating. The program avoids deadlock by ensuring that no two adjacent philosophers can acquire both chopsticks at the same time, and avoids starvation by allowing each philosopher to eat after a certain amount of time has passed.