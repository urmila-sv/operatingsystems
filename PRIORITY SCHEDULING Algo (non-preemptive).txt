PRIORITY SCHEDULING ALGORITHM
CODE:-
#include <stdio.h> 
typedef struct Process 
{ 
 int id,bt,ct,tat,wt,prio; 
} process; 
void sort(process p[],int n)
{
 for (int i=0;i<n;i++)
 for (int j=i+1;j<n;j++)
 if (p[i].prio>p[j].prio)
 {
 process temp=p[i];
 p[i]=p[j];
 p[j]=temp;
 }
}
void pbs(int n, process p[]) 
{ 
 p[0].ct = p[0].bt; 
 p[0].tat = p[0].ct; 
 p[0].wt = 0; 
 for (int i=1;i<n;i++) 
 { 
 p[i].ct = p[i-1].ct + p[i].bt; 
 p[i].tat = p[i].ct; 
 p[i].wt = p[i].tat-p[i].bt; 
 } 
 float avg_tat = 0.0; 
 float avg_wt = 0.0; 
 printf("\nID\tBT\tCT\tTAT\tWT\n"); 
 for(int i=0;i<n;i++) 
 { 
 avg_tat += p[i].tat; 
 avg_wt += p[i].wt; 
 printf("%d\t%d\t%d\t%d\t%d\n", p[i].id,p[i].bt,p[i].ct,p[i].tat,p[i].wt); 
 } 
 printf("\nAverage turn-around time = %.2f\n", (avg_tat/n)); 
 printf("Average waiting time = %.2f", (avg_wt/n)); 
} 
void print_gantt_chart(process p[], int n) 
{ 
 printf("\n\n"); 
 int i, j; 
 printf(" "); 
 for(i=0; i<n; i++) 
 { 
 for(j=0; j<p[i].bt; j++) printf("--"); 
 printf(" "); 
 } 
 printf("\n|"); 
 for(i=0; i<n; i++) 
 { 
 for(j=0; j<p[i].bt - 1; j++) printf(" "); 
 printf("P%d", p[i].id); 
 for(j=0; j<p[i].bt - 1; j++) printf(" "); 
 printf("|"); 
 } 
 printf("\n "); 
 for(i=0; i<n; i++) { 
 for(j=0; j<p[i].bt; j++) printf("--"); 
 printf(" "); 
 } 
 printf("\n"); 
 printf("0"); 
 for(i=0; i<n; i++) 
 { 
 for(j=0; j<p[i].bt; j++) printf(" "); 
 if(p[i].tat > 9) printf("\b"); 
 printf("%d", p[i].tat); 
 } 
 printf("\n"); 
} 
int main()
{ 
 int n; 
 printf("Enter the total number of processes: "); 
 scanf(" %d", &n); 
 process queue[n]; 
 printf("Enter the burst time and priority of %d processes:\n",n); 
 for (int i=0;i<n;i++) 
 { 
 queue[i].id = i+1; 
 scanf(" %d %d",&queue[i].bt,&queue[i].prio); 
 queue[i].ct = queue[i].tat = queue[i].wt = 0; 
 } 
 sort(queue,n);
 pbs(n,queue); 
 print_gantt_chart(queue, n); 
 return 0; 
}

ALgo :

Include the necessary header files stdio.h.
Define a structure Process with integer variables id, bt, ct, tat, wt, and prio.
Define a function sort() to sort the processes based on their priority.
Define a function pbs() to calculate the completion time, turn-around time, and waiting time of each process using the Priority Based Scheduling algorithm.
Calculate the average turn-around time and average waiting time of all processes.
Define a function print_gantt_chart() to print the Gantt chart showing the order of execution of processes.
Define the main function.
Prompt the user to enter the total number of processes.
Declare an array of structures queue with size n.
Prompt the user to enter the burst time and priority of each process and store them in the respective variables of the structure.
Sort the processes based on their priority using the sort() function.
Calculate the completion time, turn-around time, and waiting time of each process using the pbs() function.
Print the details of each process such as ID, burst time, completion time, turn-around time, and waiting time using the printf() function.
Print the average turn-around time and average waiting time of all processes using the printf() function.
Print the Gantt chart showing the order of execution of processes using the print_gantt_chart() function.
Exit the program with a return value of 0.
