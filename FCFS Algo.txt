FCFC ALGORITHM:-
CODE:-
#include <stdio.h>
#include <stdlib.h>
typedef struct Process 
{
 int id,at,bt,ct,tat,wt;
} process;
void sorting(int n, process p[]) 
{
 process temp;
 for (int i=0;i<n;i++) 
 {
 for (int j=0; j<n-1;j++) 
 {
 if (p[j].at>p[j+1].at) 
 {
 temp = p[j];
 p[j] = p[j+1];
 p[j+1] = temp;
 }
 }
 }
}
void fcfs(int n, process p[]) 
{
 p[0].ct = p[0].bt + p[0].at;
 p[0].tat = p[0].ct - p[0].at;
 p[0].wt = 0;
 for (int i=1;i<n;i++) 
 {
 p[i].ct = p[i-1].ct + p[i].bt;
 if (p[i].at > p[i-1].ct) 
 {
 p[i].ct += p[i].at-p[i-1].ct;
 }
 p[i].tat = p[i].ct-p[i].at;
 p[i].wt = p[i].tat-p[i].bt;
 }
 float avg_tat = 0.0;
 float avg_wt = 0.0;
 printf("\nID\tAT\tBT\tCT\tTAT\tWT\n");
 for(int i=0;i<n;i++) 
 {
 avg_tat += p[i].tat;
 avg_wt += p[i].wt;
 printf("%d\t%d\t%d\t%d\t%d\t%d\n", p[i].id,p[i].at,p[i].bt,p[i].ct,p[i].tat,p[i].wt);
 }
 printf("\nAverage turn-around time = %.2f\n", (avg_tat/n));
 printf("Average waiting time = %.2f", (avg_wt/n));
}
void print_gantt_chart(process p[], int n)
{
 int i, j;
 printf(" ");
 for(i=0; i<n; i++) 
 {
 for(j=0; j<p[i].bt; j++) printf("--");
 printf(" ");
 }
 printf("\n|");
 for(i=0; i<n; i++) 
 {
 for(j=0; j<p[i].bt - 1; j++) printf(" ");
 printf("P%d", p[i].id);
 for(j=0; j<p[i].bt - 1; j++) printf(" ");
 printf("|");
 }
 printf("\n ");
 for(i=0; i<n; i++) 
 {
 for(j=0; j<p[i].bt; j++) printf("--");
 printf(" ");
 }
 printf("\n");
 printf("0");
 for(i=0; i<n; i++) 
 {
 for(j=0; j<p[i].bt; j++) printf(" ");
 if(p[i].tat > p[i].ct) printf("\b"); 
 printf("%d", p[i].ct);
 }
 printf("\n");
}
int main() 
{
 int n;
 printf("Enter the total number of processes: ");
 scanf(" %d", &n);
 process queue[n];
 
 printf("Enter the arrival time and burst time of the processes:\n");
 for (int i=0;i<n;i++) 
 {
 queue[i].id = i+1;
 printf("For process %d: ",i+1);
 scanf(" %d %d",&queue[i].at,&queue[i].bt);
 queue[i].ct = queue[i].tat = queue[i].wt = 0;
 }
 sorting(n,queue);
 fcfs(n,queue);
 puts("");
 puts(" GANTT CHART ");
 puts(" ***** ");
 print_gantt_chart(queue, n);
 return 0;
}


Algo :

Include the necessary header files stdio.h and stdlib.h.
Define a structure Process with integer variables id, at, bt, ct, tat, and wt.
Define a function sorting() to sort the processes based on their arrival time.
Define a function fcfs() to calculate the completion time, turn-around time, and waiting time of each process using the First Come First Serve (FCFS) scheduling algorithm.
Calculate the average turn-around time and average waiting time of all processes.
Define a function print_gantt_chart() to print the Gantt chart.
Define the main function.
Prompt the user to enter the total number of processes.
Declare an array of structures queue with size n.
Prompt the user to enter the arrival time and burst time of each process and store them in the respective variables of the structure.
Sort the processes based on their arrival time using the sorting() function.
Calculate the completion time, turn-around time, and waiting time of each process using the fcfs() function.
Print the details of each process such as ID, arrival time, burst time, completion time, turn-around time, and waiting time using the printf() function.
Calculate the average turn-around time and average waiting time of all processes and print them using the printf() function.
Print the Gantt chart using the print_gantt_chart() function.
Exit the program with a return value of 0.